# 配置Terraform提供商
terraform {
  required_providers {
    kind = {
      source  = "tehcyx/kind"
      version = "~> 0.0.16"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.20.0"
    }
  }
}

# 创建Kind集群
resource "kind_cluster" "k8s_cluster" {
  name            = "kind-cluster"
  kind_config {
    kind = "Cluster"
    api_version = "kind.x-k8s.io/v1alpha4"
    
    # 控制平面节点
    node {
      role = "control-plane"
      kubeadm_config_patches = [
        "kind: InitConfiguration\nnodeRegistration:\n  kubeletExtraArgs:\n    node-labels: \"ingress-ready=true\""
      ]
      extra_port_mappings {
        container_port = 80
        host_port = 80
        protocol = "TCP"
      }
      extra_port_mappings {
        container_port = 443
        host_port = 443
        protocol = "TCP"
      }
    }
    
    # 第一个工作节点
    node {
      role = "worker"
    }
    
    # 第二个工作节点
    node {
      role = "worker"
    }
  }
  wait_for_ready  = true
  kubeconfig_path = "~/.kube/config"
}

# 配置Kubernetes提供商以连接到Kind集群
provider "kubernetes" {
  config_path    = kind_cluster.k8s_cluster.kubeconfig_path
  config_context = "kind-${kind_cluster.k8s_cluster.name}"
}

# 部署NFS服务器到集群中
resource "null_resource" "deploy_nfs_server" {
  depends_on = [kind_cluster.k8s_cluster]

  provisioner "local-exec" {
    command = "kubectl apply -f ${path.module}/nfs-deploy.yaml --kubeconfig=${kind_cluster.k8s_cluster.kubeconfig_path}"
  }
}

# 创建NFS PV和PVC的资源
resource "null_resource" "create_nfs_pv_pvc" {
  depends_on = [null_resource.deploy_nfs_server]

  provisioner "local-exec" {
    interpreter = ["cmd", "/C"]
    command = <<-EOT
      kubectl wait --for=condition=ready pod -l app=nfs-server --timeout=120s --kubeconfig=${kind_cluster.k8s_cluster.kubeconfig_path}
      
      mkdir -p ${path.module}/../manifests
      
      (echo apiVersion: v1
       echo kind: PersistentVolume
       echo metadata:
       echo   name: nfs-pv
       echo spec:
       echo   capacity:
       echo     storage: 1Gi
       echo   accessModes:
       echo     - ReadWriteMany
       echo   persistentVolumeReclaimPolicy: Retain
       echo   storageClassName: nfs
       echo   nfs:
       echo     server: nfs-server.default.svc.cluster.local
       echo     path: "/") > ${path.module}/../manifests/nfs-pv.yaml
      
      (echo apiVersion: v1
       echo kind: PersistentVolumeClaim
       echo metadata:
       echo   name: nfs-pvc
       echo spec:
       echo   accessModes:
       echo     - ReadWriteMany
       echo   storageClassName: nfs
       echo   resources:
       echo     requests:
       echo       storage: 1Gi) > ${path.module}/../manifests/nfs-pvc.yaml
    EOT
  }
}

# 部署 NFS 动态 Provisioner
resource "kubernetes_manifest" "nfs_provisioner" {
  depends_on = [kind_cluster.k8s_cluster]
  manifest = {
    apiVersion = "apps/v1"
    kind       = "Deployment"
    metadata = {
      name      = "nfs-subdir-external-provisioner"
      namespace = "default"
    }
    spec = {
      replicas = 1
      selector = {
        matchLabels = {
          app = "nfs-subdir-external-provisioner"
        }
      }
      template = {
        metadata = {
          labels = {
            app = "nfs-subdir-external-provisioner"
          }
        }
        spec = {
          serviceAccountName = "nfs-provisioner"
          containers = [{
            name  = "nfs-subdir-external-provisioner"
            image = "registry.k8s.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2"
            env = [{
              name = "NFS_SERVER"
              value = "nfs-server.default.svc.cluster.local"
            },{
              name = "NFS_PATH"
              value = "/"
            }]
          }]
        }
      }
    }
  }
}

# 创建 StorageClass
resource "kubernetes_manifest" "nfs_storageclass" {
  manifest = {
    apiVersion = "storage.k8s.io/v1"
    kind       = "StorageClass"
    metadata = {
      name = "nfs"
    }
    provisioner = "cluster.local/nfs-server-nfs-server-provisioner"
    parameters = {
      archiveOnDelete = "false"
    }
    reclaimPolicy = "Delete"
  }
}

# 创建必要的 RBAC 权限
resource "kubernetes_manifest" "rbac" {
  manifest = {
    apiVersion = "v1"
    kind       = "ServiceAccount"
    metadata = {
      name      = "nfs-provisioner"
      namespace = "default"
    }
  }
}

resource "local_file" "kubeconfig" {
  content  = kind_cluster.k8s_cluster.kubeconfig
  filename = "d:/itzdd-lab/k8s-kind-nfs-terraform/terraform/_kubeconfig/config"
}